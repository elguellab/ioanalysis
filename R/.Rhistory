regions <- unique(RS_label[, 1])
}
if(0 %in% location){
# Regions
if("all" %in% regions){
regions <- unique(RS_label[, 1])
}
else if(class(regions) == "character"){
for(k in 1:length(regions)){
if(!regions[k] %in% RS_label[, 1]) stop(paste(regions[k], "is not a region in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(regions) == "numeric" | class(regions) == "integer"){
region <- unique(RS_label[, 1])
regions <- region[regions]
}
# Sectors
if("all" %in% sectors){
sectors <- unique(RS_label[, 2])
}
else if(class(sectors) == "character"){
for(k in 1:length(sectors)){
if(!sectors[k] %in% RS_label[, 2]) stop(paste(sectors[k], "is not a sector in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(sectors) == "numeric" | class(sectors) == "integer"){
sector <- unique(RS_label[, 2])
sectors <- sector[sectors]
}
# Putting it together
location <- which(RS_label[, 1] %in% regions & RS_label[, 2] %in% sectors)
}
} else if(!is.null(ES)){
location <- as.numeric(ES[,1])
regions <- unique(ES[,2])
}
location
}
MPM(io)
MPM(io)MPM <- function(io, ES = NULL, regions = "all", sectors = "all"){
# Preliminaries
if(class(io) != "InputOutput") stop('io should be of "InputOutput" class. See ?as.inputoutput')
if(!is.null(ES)){
if(class(ES) != "EasySelect") stop('ES should be of "EasySelect". See ?easy.select')
}
L <- io$L
RS_label <- io$RS_label     # Region Sector label
# Grabbing the regions and sectors
if(is.null(ES)){
location <- 0
if("all" %in% regions & "all" %in% sectors){
location <- 1:length(X)
regions <- unique(RS_label[, 1])
}
if(0 %in% location){
# Regions
if("all" %in% regions){
regions <- unique(RS_label[, 1])
}
else if(class(regions) == "character"){
for(k in 1:length(regions)){
if(!regions[k] %in% RS_label[, 1]) stop(paste(regions[k], "is not a region in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(regions) == "numeric" | class(regions) == "integer"){
region <- unique(RS_label[, 1])
regions <- region[regions]
}
# Sectors
if("all" %in% sectors){
sectors <- unique(RS_label[, 2])
}
else if(class(sectors) == "character"){
for(k in 1:length(sectors)){
if(!sectors[k] %in% RS_label[, 2]) stop(paste(sectors[k], "is not a sector in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(sectors) == "numeric" | class(sectors) == "integer"){
sector <- unique(RS_label[, 2])
sectors <- sector[sectors]
}
# Putting it together
location <- which(RS_label[, 1] %in% regions & RS_label[, 2] %in% sectors)
}
} else if(!is.null(ES)){
location <- as.numeric(ES[,1])
regions <- unique(ES[,2])
}
location
}
MPM <- function(io, ES = NULL, regions = "all", sectors = "all"){
# Preliminaries
if(class(io) != "InputOutput") stop('io should be of "InputOutput" class. See ?as.inputoutput')
if(!is.null(ES)){
if(class(ES) != "EasySelect") stop('ES should be of "EasySelect". See ?easy.select')
}
L <- io$L
RS_label <- io$RS_label     # Region Sector label
# Grabbing the regions and sectors
if(is.null(ES)){
location <- 0
if("all" %in% regions & "all" %in% sectors){
location <- 1:length(X)
regions <- unique(RS_label[, 1])
}
if(0 %in% location){
# Regions
if("all" %in% regions){
regions <- unique(RS_label[, 1])
}
else if(class(regions) == "character"){
for(k in 1:length(regions)){
if(!regions[k] %in% RS_label[, 1]) stop(paste(regions[k], "is not a region in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(regions) == "numeric" | class(regions) == "integer"){
region <- unique(RS_label[, 1])
regions <- region[regions]
}
# Sectors
if("all" %in% sectors){
sectors <- unique(RS_label[, 2])
}
else if(class(sectors) == "character"){
for(k in 1:length(sectors)){
if(!sectors[k] %in% RS_label[, 2]) stop(paste(sectors[k], "is not a sector in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(sectors) == "numeric" | class(sectors) == "integer"){
sector <- unique(RS_label[, 2])
sectors <- sector[sectors]
}
# Putting it together
location <- which(RS_label[, 1] %in% regions & RS_label[, 2] %in% sectors)
}
} else if(!is.null(ES)){
location <- as.numeric(ES[,1])
regions <- unique(ES[,2])
}
location
}
MPM(io)
MPM <- function(io, ES = NULL, regions = "all", sectors = "all"){
# Preliminaries
if(class(io) != "InputOutput") stop('io should be of "InputOutput" class. See ?as.inputoutput')
if(!is.null(ES)){
if(class(ES) != "EasySelect") stop('ES should be of "EasySelect". See ?easy.select')
}
L <- io$L
X <- io$X
RS_label <- io$RS_label     # Region Sector label
# Grabbing the regions and sectors
if(is.null(ES)){
location <- 0
if("all" %in% regions & "all" %in% sectors){
location <- 1:length(X)
regions <- unique(RS_label[, 1])
}
if(0 %in% location){
# Regions
if("all" %in% regions){
regions <- unique(RS_label[, 1])
}
else if(class(regions) == "character"){
for(k in 1:length(regions)){
if(!regions[k] %in% RS_label[, 1]) stop(paste(regions[k], "is not a region in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(regions) == "numeric" | class(regions) == "integer"){
region <- unique(RS_label[, 1])
regions <- region[regions]
}
# Sectors
if("all" %in% sectors){
sectors <- unique(RS_label[, 2])
}
else if(class(sectors) == "character"){
for(k in 1:length(sectors)){
if(!sectors[k] %in% RS_label[, 2]) stop(paste(sectors[k], "is not a sector in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(sectors) == "numeric" | class(sectors) == "integer"){
sector <- unique(RS_label[, 2])
sectors <- sector[sectors]
}
# Putting it together
location <- which(RS_label[, 1] %in% regions & RS_label[, 2] %in% sectors)
}
} else if(!is.null(ES)){
location <- as.numeric(ES[,1])
regions <- unique(ES[,2])
}
location
}
MPM(io)
MPM <- function(io, ES = NULL, regions = "all", sectors = "all"){
# Preliminaries
if(class(io) != "InputOutput") stop('io should be of "InputOutput" class. See ?as.inputoutput')
if(!is.null(ES)){
if(class(ES) != "EasySelect") stop('ES should be of "EasySelect". See ?easy.select')
}
L <- io$L
X <- io$X
RS_label <- io$RS_label     # Region Sector label
# Grabbing the regions and sectors
if(is.null(ES)){
location <- 0
if("all" %in% regions & "all" %in% sectors){
location <- 1:length(X)
regions <- unique(RS_label[, 1])
}
if(0 %in% location){
# Regions
if("all" %in% regions){
regions <- unique(RS_label[, 1])
}
else if(class(regions) == "character"){
for(k in 1:length(regions)){
if(!regions[k] %in% RS_label[, 1]) stop(paste(regions[k], "is not a region in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(regions) == "numeric" | class(regions) == "integer"){
region <- unique(RS_label[, 1])
regions <- region[regions]
}
# Sectors
if("all" %in% sectors){
sectors <- unique(RS_label[, 2])
}
else if(class(sectors) == "character"){
for(k in 1:length(sectors)){
if(!sectors[k] %in% RS_label[, 2]) stop(paste(sectors[k], "is not a sector in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(sectors) == "numeric" | class(sectors) == "integer"){
sector <- unique(RS_label[, 2])
sectors <- sector[sectors]
}
# Putting it together
location <- which(RS_label[, 1] %in% regions & RS_label[, 2] %in% sectors)
}
} else if(!is.null(ES)){
location <- as.numeric(ES[,1])
regions <- unique(ES[,2])
}
####################
## Let's do this! ##
####################
n <- length(X)
one <- matrix(1, ncol = n)
V <- t(one) %*% L %*% one
Lcol <- L %*% one
Lrow <- t(one) %*% L
M <- 1/V * Lcol %*% Lrow
M
}
MPM(L)
MPM()
MPM(io)
MPM <- function(io, ES = NULL, regions = "all", sectors = "all"){
# Preliminaries
if(class(io) != "InputOutput") stop('io should be of "InputOutput" class. See ?as.inputoutput')
if(!is.null(ES)){
if(class(ES) != "EasySelect") stop('ES should be of "EasySelect". See ?easy.select')
}
L <- io$L
X <- io$X
RS_label <- io$RS_label     # Region Sector label
# Grabbing the regions and sectors
if(is.null(ES)){
location <- 0
if("all" %in% regions & "all" %in% sectors){
location <- 1:length(X)
regions <- unique(RS_label[, 1])
}
if(0 %in% location){
# Regions
if("all" %in% regions){
regions <- unique(RS_label[, 1])
}
else if(class(regions) == "character"){
for(k in 1:length(regions)){
if(!regions[k] %in% RS_label[, 1]) stop(paste(regions[k], "is not a region in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(regions) == "numeric" | class(regions) == "integer"){
region <- unique(RS_label[, 1])
regions <- region[regions]
}
# Sectors
if("all" %in% sectors){
sectors <- unique(RS_label[, 2])
}
else if(class(sectors) == "character"){
for(k in 1:length(sectors)){
if(!sectors[k] %in% RS_label[, 2]) stop(paste(sectors[k], "is not a sector in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(sectors) == "numeric" | class(sectors) == "integer"){
sector <- unique(RS_label[, 2])
sectors <- sector[sectors]
}
# Putting it together
location <- which(RS_label[, 1] %in% regions & RS_label[, 2] %in% sectors)
}
} else if(!is.null(ES)){
location <- as.numeric(ES[,1])
regions <- unique(ES[,2])
}
####################
## Let's do this! ##
####################
n <- length(X)
one <- matrix(1, nrow = n)
V <- t(one) %*% L %*% one
Lcol <- L %*% one
Lrow <- t(one) %*% L
M <- 1/V * Lcol %*% Lrow
M
}
MPM(io)
MPM <- function(io, ES = NULL, regions = "all", sectors = "all"){
# Preliminaries
if(class(io) != "InputOutput") stop('io should be of "InputOutput" class. See ?as.inputoutput')
if(!is.null(ES)){
if(class(ES) != "EasySelect") stop('ES should be of "EasySelect". See ?easy.select')
}
L <- io$L
X <- io$X
RS_label <- io$RS_label     # Region Sector label
# Grabbing the regions and sectors
if(is.null(ES)){
location <- 0
if("all" %in% regions & "all" %in% sectors){
location <- 1:length(X)
regions <- unique(RS_label[, 1])
}
if(0 %in% location){
# Regions
if("all" %in% regions){
regions <- unique(RS_label[, 1])
}
else if(class(regions) == "character"){
for(k in 1:length(regions)){
if(!regions[k] %in% RS_label[, 1]) stop(paste(regions[k], "is not a region in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(regions) == "numeric" | class(regions) == "integer"){
region <- unique(RS_label[, 1])
regions <- region[regions]
}
# Sectors
if("all" %in% sectors){
sectors <- unique(RS_label[, 2])
}
else if(class(sectors) == "character"){
for(k in 1:length(sectors)){
if(!sectors[k] %in% RS_label[, 2]) stop(paste(sectors[k], "is not a sector in RS_label. Check spelling, capitalization, and punctuation."))
}
}
else if(class(sectors) == "numeric" | class(sectors) == "integer"){
sector <- unique(RS_label[, 2])
sectors <- sector[sectors]
}
# Putting it together
location <- which(RS_label[, 1] %in% regions & RS_label[, 2] %in% sectors)
}
} else if(!is.null(ES)){
location <- as.numeric(ES[,1])
regions <- unique(ES[,2])
}
####################
## Let's do this! ##
####################
n <- length(X)
one <- matrix(1, nrow = n)
V <- t(one) %*% L %*% one
Lcol <- L %*% one
Lrow <- t(one) %*% L
M <- Lcol %*% Lrow
M <- 1/V * M
M[location, location]
}
setwd("C:/REAL/ioanalysis/package/ioanalysis/R")
filenames <- list.files(pattern = ".R")
invisible(lapply(filenames, source))
MPM(io)
#############
#### MPM ####
#############
invisible(lapply(filenames, source))
MPM(io)
#############
#### MPM ####
#############
invisible(lapply(filenames, source))
MPM(io)
#############
#### MPM ####
#############
invisible(lapply(filenames, source))
MPM(io)
#############
#### MPM ####
#############
invisible(lapply(filenames, source))
MPM(io)
#############
#### MPM ####
#############
invisible(lapply(filenames, source))
MPM(io)
#############
#### MPM ####
#############
invisible(lapply(filenames, source))
MPM(io)
#############
#### MPM ####
#############
invisible(lapply(filenames, source))
MPM(io)
help(pkg = "ioanalyis")
?help
help(package = "ioanalysis")
#############
#### rsp ####
#############
invisible(lapply(filenames, source))
#############
#### rsp ####
#############
invisible(lapply(filenames, source))
rsp(io)
rsp <- function(io){
if(class(io) != "InputOutput") stop('io should be of "InputOutput" class. See ?as.inputoutput')
A <- io$A
X <- io$X
M <- import.total(io)
E <- export.total(io)
##############################
## Calculating calculations ##
##############################
p <- (X - E) / (X - E + M)
Anew <- p * A
Anew
}
rsp(io)
#############
#### rsp ####
#############
invisible(lapply(filenames, source))
rsp(io)
rsp <- function(io){
if(class(io) != "InputOutput") stop('io should be of "InputOutput" class. See ?as.inputoutput')
A <- io$A
X <- io$X
M <- import.total(io)
E <- export.total(io)
##############################
## Calculating calculations ##
##############################
n <- length(X)
p <- (X - E) / (X - E + M)
Anew <- t(p) %*% A
Anew
}
rsp(io)
rsp <- function(io){
if(class(io) != "InputOutput") stop('io should be of "InputOutput" class. See ?as.inputoutput')
A <- io$A
X <- io$X
M <- import.total(io)
E <- export.total(io)
##############################
## Calculating calculations ##
##############################
n <- length(X)
p <- (X - E) / (X - E + M)
phat <- matrix(p, ncol = n, nrow = n) # A faster computation than diag(p)
Anew <- p * A
Anew
}
rsp(io)
rsp <- function(io){
if(class(io) != "InputOutput") stop('io should be of "InputOutput" class. See ?as.inputoutput')
A <- io$A
X <- io$X
M <- import.total(io)
E <- export.total(io)
##############################
## Calculating calculations ##
##############################
n <- length(X)
p <- (X - E) / (X - E + M)
phat <- matrix(p, ncol = n, nrow = n) # A faster computation than diag(p)
Anew <- phat * A
Anew
}
rsp(io)
library(devtools)
install_github("jjpwade/ioanalysis")
rm(list = ls())
install_github("jjpwade/ioanalysis")
library(devtools)
install_github("jjpwade/ioanalysis")
library(ioanalysis)
install_github("jjpwade/ioanalysis")
c <- 1
c[1]
c[[1]]
c[[[1]]]
